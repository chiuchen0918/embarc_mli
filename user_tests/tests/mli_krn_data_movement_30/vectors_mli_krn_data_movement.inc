/*
* Copyright 2021, Synopsys, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-3-Clause license found in
* the LICENSE file in the root directory of this source tree.
*
*/
#include <stdint.h>

#include "mli_types.h"
#include "test_tensor_quantizer.h"

using mli::tst::tensor_quantizer;

extern mli::tst::tensor_quantizer input_1_fx16;
extern mli::tst::tensor_quantizer input_1_sa8;
extern mli::tst::tensor_quantizer input_2_fx16;
extern mli::tst::tensor_quantizer input_2_sa8;
extern mli::tst::tensor_quantizer input_3_fx16;
extern mli::tst::tensor_quantizer input_3_sa8;
extern mli::tst::tensor_quantizer input_4_fx16;
extern mli::tst::tensor_quantizer input_4_sa8;
extern mli::tst::tensor_quantizer test_1_out_fx16;
extern mli::tst::tensor_quantizer test_1_out_sa8;
extern mli::tst::tensor_quantizer test_2_out_fx16;
extern mli::tst::tensor_quantizer test_2_out_sa8;
extern mli::tst::tensor_quantizer test_3_out_fx16;
extern mli::tst::tensor_quantizer test_3_out_sa8;
extern mli::tst::tensor_quantizer test_4_out_fx16;
extern mli::tst::tensor_quantizer test_4_out_sa8;
extern mli::tst::tensor_quantizer test_5_out_fx16;
extern mli::tst::tensor_quantizer test_5_out_sa8;
extern mli::tst::tensor_quantizer test_6_out_fx16;
extern mli::tst::tensor_quantizer test_6_out_sa8;
extern mli::tst::tensor_quantizer test_7_out_fx16;
extern mli::tst::tensor_quantizer test_7_out_sa8;
extern mli::tst::tensor_quantizer test_8_out_fx16;
extern mli::tst::tensor_quantizer test_8_out_sa8;
extern mli::tst::tensor_quantizer test_9_out_fx16;
extern mli::tst::tensor_quantizer test_9_out_sa8;
extern mli::tst::tensor_quantizer test_10_out_fx16;
extern mli::tst::tensor_quantizer test_10_out_sa8;
extern mli::tst::tensor_quantizer test_11_out_fx16;
extern mli::tst::tensor_quantizer test_11_out_sa8;
extern mli::tst::tensor_quantizer test_12_out_fx16;
extern mli::tst::tensor_quantizer test_12_out_sa8;
extern mli::tst::tensor_quantizer test_13_out_sa32;

typedef enum _mem_used {
   CCM_MEM = 0,
   OUTSIDE_MEM
} mem_used;

typedef struct _in_out_mem {
   mem_used in_mem;
   mem_used out_mem;
} in_out_mem; 

#define number_of_configs 18

static int32_t out_mem_stride_cfg[number_of_configs][4] = {{0}, {0}, 
                                                           {0}, {0},
                                                           {(((2*1)+2) * 6) + 4 , (2 * 1) + 2, 1, 0}, {(((2*1)+2) * 6) + 4 , (2 * 1) + 2, 1, 0},
                                                           {0},

                                                           {0}};

static uint32_t offsets_cfg[number_of_configs][4] = {{0}, {0},
                                                    {0}, {0},
                                                    {1, 2, 2, 0}, {1, 2, 2, 0},
                                                    {0},
                                                    
                                                    {0}};

static uint32_t sizes_cfg[number_of_configs][4] = {{0}, {0}, {0}, {0}, {3, 6, 2, 0}, {3, 6, 2, 0}, {0}, {0}};

static int32_t sub_sample[number_of_configs][4] = {{1, 1, 1, 1}, {1, 1, 1, 1},
                                                   {1, 1, 1, 1}, {1, 1, 1, 1},
                                                   {1, 1, 1, 1}, {1, 1, 1, 1},
                                                   {1, 1, 1, 1},
                                                   
                                                   {2, 2, 1, 1}};
                                  
static uint32_t out_offsets_cfg[number_of_configs][4] = {{0}, {0},
                                                        {0}, {0},
                                                        {0}, {0},
                                                        {16,8,0,0}, 
                                                        
                                                        {0}};

static in_out_mem mem[number_of_configs] = {{CCM_MEM, CCM_MEM}, {CCM_MEM, OUTSIDE_MEM}, {OUTSIDE_MEM, CCM_MEM}, 
                                           {OUTSIDE_MEM, CCM_MEM}, {CCM_MEM, CCM_MEM}, {CCM_MEM, OUTSIDE_MEM},
                                           {CCM_MEM, CCM_MEM}, {CCM_MEM, OUTSIDE_MEM}, {OUTSIDE_MEM, CCM_MEM}, 
                                           {CCM_MEM, OUTSIDE_MEM},  
                                           {CCM_MEM, OUTSIDE_MEM}, {OUTSIDE_MEM, CCM_MEM}, {CCM_MEM, OUTSIDE_MEM},
                                           {OUTSIDE_MEM, CCM_MEM}, {OUTSIDE_MEM, CCM_MEM}, {OUTSIDE_MEM, CCM_MEM},
                                           {OUTSIDE_MEM, CCM_MEM}, {OUTSIDE_MEM, CCM_MEM}};

static const float input_1_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float input_1_scales[] = {0.1389700770f, 0.1210434511f, 0.1394459009f, 0.1419170946f, 0.1500582844f, 0.1383515149f, 0.1498492807f, 0.1461481899f};
static const float input_1_zero_points[] = {-0.1127522215f, -2.0054848194f, 0.7046295404f, -0.1974012405f, 0.0896190554f, 1.0528359413f, -0.2535052598f, -0.6430486441f};
static const int8_t input_1_scales_frac[] = {17, 18, 17, 17, 17, 17, 17, 17};
static const int input_1_sa_dim = 1;

static const int input_1_fx8_frac = 3;

#define INPUT_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {16, 8}, \
    /* .rank =  */ 2


static const mli_tensor input_1_tsr_fx16 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_1_tsr_sa8 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_2_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float input_2_scale = 0.0774965286f;
static const float input_2_zero_point = -0.0426510200f;
static const int8_t input_2_scales_frac[] = {18};
static const int input_2_sa_dim = -1;

static const int input_2_fx8_frac = 3;

#define INPUT_2_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {(((((2 * 1) + 1) * 4) + 3) * 8) + 2, (((2 * 1) + 1) * 4) + 3, (2 * 1) + 1, 1}, \
    /* .shape = */ {2, 8, 4, 2}, \
    /* .rank =  */ 4


static const mli_tensor input_2_tsr_fx16 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_2_tsr_sa8 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_3_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float input_3_scale = 0.0774965286f;
static const float input_3_zero_point = -0.0426510200f;
static const int8_t input_3_scales_frac[] = {18};
static const int input_3_sa_dim = -1;

static const int input_3_fx8_frac = 3;

#define INPUT_3_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 8, 4}, \
    /* .rank =  */ 3


static const mli_tensor input_3_tsr_fx16 = {
    INPUT_3_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_3_tsr_sa8 = {
    INPUT_3_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_4_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float input_4_scale = 0.0774965286f;
static const float input_4_zero_point = -0.0426510200f;
static const int8_t input_4_scales_frac[] = {18};
static const int input_4_sa_dim = -1;

static const int input_4_fx8_frac = 3;

#define INPUT_4_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {2, 4, 8, 2}, \
    /* .rank =  */ 4


static const mli_tensor input_4_tsr_fx16 = {
    INPUT_4_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_4_tsr_sa8 = {
    INPUT_4_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_5_data[] = {-5.537705f, -9.773581f, 8.674530f, -3.880605f, -8.846663f, 4.605846f, -9.848570f, 9.353249f, -2.809122f, -2.375455f, -9.617800f, 9.593845f, 4.587400f, 0.686743f, 9.960311f, 8.117019f, 4.927867f, 4.879846f, 1.942861f, 8.443638f, -7.029161f, -4.710882f, 8.941276f, -9.909705f, -7.751890f, 1.562038f, 3.905834f, 7.919552f, 4.223790f, -4.731250f, -5.741940f, 0.843526f, -9.044276f, -4.139698f, 0.930239f, 4.688133f, -5.366007f, -9.260583f, 3.334567f, 2.909303f, -3.263134f, 9.605512f, -8.534649f, 2.416644f, 5.736911f, 6.529453f, 5.593678f, 6.841092f, -4.709810f, -3.521997f, 9.545982f, -3.590966f, 1.649245f, -1.731241f, 9.327818f, 7.650075f, -5.920446f, 3.151993f, -1.975210f, -0.368697f, -3.916168f, -0.739258f, 5.969540f, -9.557004f, -9.531282f, -8.578011f, -8.449552f, -1.546692f, -9.268266f, -5.241891f, -6.112641f, -5.959867f, 7.632429f, 4.552503f, -0.964715f, 0.807554f, -2.979941f, -1.236205f, 1.050729f, 0.591521f, -6.239204f, 7.221546f, 3.662940f, -5.168088f, 5.760486f, -9.659819f, 9.758537f, 8.617229f, -4.588802f, 2.293520f, -5.299853f, -8.906449f, 3.572135f, 3.154615f, 8.250141f, -6.034569f, -4.719683f, 4.170882f, -7.189336f, 1.504569f, -9.299482f, 4.959413f, -4.074182f, -4.022147f, -8.018423f, -2.047708f, 1.857983f, 2.844486f, -1.321242f, -2.484563f, 7.985510f, 3.689439f, 9.206396f, 2.749269f, 3.222893f, 0.351409f, -5.562649f, -3.678065f, 6.671466f, 5.978989f, 0.575954f, -5.914721f, -6.174376f, -3.511566f, -7.626552f, 3.735646f, 1.880747f, -2.825001f, 7.476468f, -2.489005f, -9.657745f, -2.290037f, -3.524459f, -2.011406f, 7.756642f, -8.645021f, 7.688596f, -9.088435f, 2.637617f, 4.627152f, -0.458229f, -6.252566f, -3.935548f, -7.749174f, 8.630533f, -5.901428f, -7.659033f, 5.109962f, 7.941267f, -2.030481f, 5.864658f, -2.267255f, -8.589169f, -2.408389f, -0.918066f, 5.867355f, 1.213526f, 3.872615f, 6.417301f, -7.806497f, 8.842041f, -2.243768f, -1.299414f, 4.668867f, 2.700035f, -4.453544f, -3.046755f, 7.704109f, -0.122088f, -0.291582f, -5.498234f, 8.765065f, 7.460817f, 0.067740f, -5.953998f, -7.713502f, -6.314089f, 4.219299f, 1.890590f, 1.850003f, 9.131188f, 3.820248f, 0.151566f, -4.402135f, -5.777347f, 3.310054f, -3.622943f, 0.747617f, 2.977428f, -7.804265f, -1.081044f, 0.551011f, -4.904489f, -5.388240f, 7.535455f, -7.636656f, 9.810171f, -3.995152f, -8.129041f, 6.387306f, 3.322022f, -3.673910f, -9.355461f, -8.895935f, 6.687779f, -1.389754f, 4.177249f, 7.461650f, -6.616431f, -2.840925f, 1.929364f, 0.884584f, 8.339114f, -5.671252f, 7.234724f, -9.919388f, 3.064678f, -5.610569f, 5.202291f, 1.727323f, 2.935291f, 0.042226f, -1.754473f, -6.083329f, 2.471850f, -9.073408f, -7.403290f, 3.678039f, 3.641033f, 0.339438f, -8.772891f, 6.348806f, -1.162215f, 2.971081f, -3.638201f, -4.137796f, -5.614274f, 6.109608f, -7.406723f, -5.450929f, 6.740713f, -2.999998f, 0.726187f, -7.877058f, -7.452991f, 4.919935f, -3.567008f, 1.299939f, -8.597800f, -3.541068f, -4.331118f, -9.482455f, 1.566812f, -7.804892f, 5.438632f, -9.660065f, 6.225497f, -4.694796f, -9.479974f, 1.140638f, -5.663946f, -0.439833f, 4.248531f, -8.912402f, -6.692367f, -7.517857f, 1.737610f, -9.865044f, 1.058626f, 3.858235f, 8.011458f, 9.146852f, 4.732911f, 2.011154f, -1.504319f, 8.724122f, 0.443492f, 9.055251f, -6.273280f, 7.599282f, -2.519755f, 6.183200f, 6.280422f, -0.930571f, -9.193922f, -3.111722f, 9.538403f, 0.581983f, 1.324166f, 0.126073f, 5.932268f, -8.207951f, -3.812277f, -0.045092f, -3.600889f, 0.806761f, 7.367905f, -4.471436f, 1.156582f, -5.215704f, -2.462862f, 7.660976f, 8.003812f, -3.193382f, -5.033093f, 7.766702f, -8.898901f, -0.146709f, -2.532800f, 3.220382f, 5.170570f, 3.219945f, -4.257966f, 2.360290f, -4.074149f, -4.227095f, -6.958299f, 6.968436f, -9.935631f, -1.434452f, -3.576865f, -6.228617f, -1.788751f, -8.027538f, 2.859565f, -6.496607f, 7.493202f, 1.047942f, 7.059323f, -1.848034f, -5.003196f, -3.381967f, 6.595108f, 7.917791f, -4.401856f, -1.628339f, -8.570508f, -9.890413f, -8.139853f, 3.011157f, 5.169014f, -4.400824f, -2.565396f, 9.508187f, -4.609064f, -9.380124f, 0.656188f, -8.494809f, -5.596405f, 6.154734f, 5.206835f, -6.533388f, -9.908562f, 0.799011f, -6.409421f, -4.020619f, -0.401479f, 2.312284f, -8.315347f, 9.471761f, -1.913672f, 5.043190f, -4.925042f, 9.492157f, -7.478724f, 9.491533f, -5.029701f, -0.945403f, -1.870642f, 5.145523f, -1.939760f, -5.390129f, -1.574179f, 3.366251f, 7.468739f, 7.463684f, -5.734836f, -3.867865f, -0.210390f, 0.465065f, 9.003027f, 0.350859f, -0.104497f, 5.557276f, 0.082576f, 9.419497f, -4.211278f, -8.350624f, -9.212864f, -1.749247f, 1.920388f, 5.035935f, 2.590095f, -8.048835f, 5.187710f, -8.960308f, -5.438058f, -1.365995f, 6.154722f, 1.458440f, 5.472907f, -0.693829f, 2.732524f, -0.577883f, 4.921897f, 2.008974f, -9.819709f, -7.284270f, 6.428231f, 6.163215f, -7.106684f, 9.580820f, -4.804966f, -6.500852f, 0.220407f, -1.143795f, -7.214040f, -5.465379f, -5.633023f, 3.526339f, -2.794241f, -6.762589f, 4.149948f, -1.582139f, 6.864445f, 0.465486f, 8.342910f, 5.135204f, -6.588691f, -7.709398f, 0.992086f, -0.986700f, 0.545756f, 8.151305f, 7.126616f, 6.990608f, -9.029054f, 6.022097f, 7.835453f, -9.474216f, -1.442136f, 4.874331f, -7.700157f, 7.486621f, 1.962171f, -0.687943f, 4.000143f, 3.642878f, -1.708031f, 7.806960f, -7.745289f, 2.091445f, -4.463417f, -0.741403f, 5.316317f, 3.363858f, 8.843373f, -0.141867f, -9.729705f, -0.947529f, 5.235709f, 7.863097f, -2.092845f, 2.988321f, -7.074992f, -7.872585f, 8.337017f, 2.762199f, -7.754147f, 7.488380f, -4.251653f, -0.389097f, 3.312734f, 0.580629f, -8.586411f, -5.980095f, 8.931824f, 6.530021f, -2.402671f, -0.686206f, 1.038430f, -3.170138f, 2.717335f, 3.478971f, 8.905935f, -2.777106f, 5.997790f, -5.920940f, 0.483425f, -3.001419f, -7.835442f, -0.151706f, 6.060537f, -9.736161f, 0.806858f, 1.373583f, 3.923055f, 4.812983f, -1.539342f, 9.432754f, 2.033526f, -1.567306f, 3.127231f, 7.744184f, -9.190941f, -9.340849f, -7.661241f, -7.174859f, -0.059618f, 0.662503f, 8.589450f, 3.474641f, -7.040846f, -8.896163f, 4.432113f, -2.572819f, -0.053234f, 1.124144f, 9.391225f, -2.570882f, 9.882470f, 3.789057f, 7.263279f, 9.350155f, -8.062175f, -4.609083f, 5.656475f, -4.555697f, -8.468723f, 7.923590f, -2.848366f, -8.702301f, 1.443799f, -0.278216f, 9.338183f, 4.122426f, -4.579997f, 1.449479f, 3.352542f, -5.735403f, -1.383862f, -8.066648f, 0.818959f, -3.086794f, -6.674230f, 7.677201f, -4.011556f, -9.238658f, 2.706414f, 5.395267f, 2.658727f, -3.080515f, -4.719833f, -8.776396f, -0.949438f, -7.643275f, 7.526889f, -1.254968f, 4.027752f, 6.130227f, -2.299652f, 0.847884f, -4.632913f, -0.601207f, 3.496729f, 6.336210f, -4.898014f, 6.740091f, 9.174412f, 1.627571f, -8.940776f, -6.607342f, 5.005423f, 0.458059f, 1.488893f, -7.240181f, 8.311644f, 4.247180f, -3.814603f, 3.091845f, -6.297013f, -2.130626f, 0.664066f, 3.821316f, -8.422950f, 6.034864f, 9.507074f, 2.200722f, -7.189361f, -7.991443f, 8.292078f, -4.970132f, 1.915073f, -0.683281f, 7.355494f, -9.449707f, 7.897497f, -3.080285f, 6.632381f, 5.555844f, -3.551113f, 0.682053f, -2.330738f, -7.231820f, -3.610982f, -5.049287f, 0.921805f, 5.232251f, 5.516032f, 9.780306f, -1.954774f, 9.675670f, 6.152934f, -8.323058f, -8.310427f, -6.253030f, 7.486740f, 7.730741f, 1.791983f, -5.810655f, 0.130573f, 5.434109f, -5.381402f, 1.063902f, -6.607864f, 1.041327f, -1.722354f, 8.388311f, -7.359805f, -1.343454f, -9.397093f, -6.540243f, -8.232459f, 2.787608f, 7.452201f, 0.891846f, 1.038448f, 4.690329f, 7.591969f, 5.846114f, -4.637495f, 0.605086f, 5.798781f, -0.527196f, 4.581037f, -0.405564f, 1.366107f, -4.250980f, -4.618423f, -7.019023f, -6.843938f, 4.218767f, -7.111735f, -8.018553f, 9.561406f, -9.679605f, 3.454967f, -3.809079f, 5.362668f, 3.811460f, 8.573391f, 2.563739f, 3.026594f, -8.722835f, -0.811051f, -2.784677f, 1.568187f, 2.821109f, 3.992873f, 3.212556f, -0.711246f, -6.485449f, -1.005968f, 0.423495f, -3.814159f, -5.951305f, -6.806059f, 4.951274f, 1.809466f, -9.192543f, 6.285620f, 9.915231f, -7.164621f, -8.408609f, 8.067930f, -4.294346f, 9.465924f, -1.263196f, -3.762781f, -5.291278f, 4.650138f, -8.847093f, 9.365079f, -1.824163f, -3.163468f, -7.454721f, -2.094382f, 5.290884f, -1.152397f, -2.710865f, -4.590859f, 1.077173f, 8.496553f, 9.006515f, 4.117934f, -8.320309f, -3.327445f, -4.873161f, 8.020357f, 0.300849f, -1.893574f, 0.380007f, -9.402942f, -9.812736f, -8.546960f, 8.891563f, 6.520185f, -0.889652f, 9.443036f, -2.420222f, -2.211060f, 7.003712f, -3.530186f, 4.639536f, -3.451679f, -6.659910f, -5.528926f, 6.889466f, 4.551676f, -2.536506f, -7.744015f, -0.406192f, 6.012336f, 2.456878f, 8.324395f, 9.710286f, -4.377915f, 2.347896f, -2.242488f, -1.294997f, -3.652957f, 2.137135f, -0.985079f, 0.109311f, -4.074170f, -5.467468f, -5.799716f, 9.016460f, -4.559649f, 2.689782f, 1.701999f, -6.325320f, -0.977579f, -7.631845f, 3.121036f, -3.073907f, 9.662804f, 7.398893f, -5.307784f, -7.060135f, 7.766097f, -6.945848f, -4.755958f, 3.635451f, -0.122717f, -7.534232f, 5.853627f, 9.770892f, 5.356906f, 5.481226f, -3.229753f, 4.672761f, 7.197420f, 9.224800f, -7.130992f, 2.244456f, -1.578747f, 9.072083f, -8.001619f, -7.996580f, 1.537412f, -8.856765f, -7.733313f, 6.999054f, 9.311218f, -1.745909f, -5.929004f, 1.102611f, 0.042406f, -4.944889f, 4.606291f, -4.784834f, 7.104722f, 3.428761f, 8.615547f, -6.828324f, -6.460354f, 1.856787f, 5.116176f, -9.927332f, 5.995185f, 9.403856f, 7.423466f, -3.011347f, -7.245159f, 9.323984f, 3.693955f, 6.264630f, 1.865583f, -9.756651f, -7.687766f, -7.384066f, -1.150893f, -6.274928f, -1.822626f, -9.342932f, 9.882947f, 7.498547f, -1.846830f, -6.235781f, 2.330509f, -8.173842f, 3.229593f, -7.388138f, -2.147200f, -5.032849f, 5.107291f, -1.438887f, 0.752238f, 5.602585f, 9.929578f, -2.209836f, -8.144136f, -6.957812f, -6.831109f, 9.800299f, -9.117824f, 7.241138f, 3.251864f, 3.345230f, -3.374083f, 3.700163f, 7.814319f, 7.258997f, 6.373610f, -3.902140f, 1.543439f, -3.038372f, -0.672134f, -6.794272f, 4.787713f, 7.224915f, -2.776307f, -4.261822f, 0.480028f, -6.864464f, 1.031965f, 0.272811f, -8.854778f, -9.686987f, -8.789998f, 9.614460f, 1.465292f, -2.505690f, 3.340358f, -3.415656f, -6.023977f, 7.984222f, 5.991214f, -7.727905f, 7.929147f, 9.835283f, -6.638586f, 6.678627f, 8.562924f, 5.470634f, 6.892580f, -3.545902f, -5.343675f, -4.983546f, 1.448508f, -2.238170f, 5.164262f, -4.108406f, 7.956658f, 3.992265f, -4.609154f, 4.847352f, 2.295792f, 2.819722f, 1.472678f, -0.457560f, 6.414792f, 6.253847f, -2.077371f, -7.499379f, -8.657444f, 5.311042f, -7.435250f, 3.167908f, -2.197416f, 3.109910f, 0.031046f, -1.269007f, -1.609650f, 1.962482f, 0.185289f, 5.261914f, 5.301140f, -8.721926f, 0.909309f, 6.083952f, -2.250122f, -7.346372f, -4.171508f, -6.553977f, -6.179029f, 5.949595f, -4.414143f, -7.665680f, -3.304786f, -3.019329f, 9.761195f, -3.916917f, -8.269552f, 9.024848f, 1.126894f, -7.875503f, 6.970701f, 9.796067f, -2.665282f, -6.520037f, -8.272862f, 1.228930f, -1.247212f, -0.886477f, 3.174296f, 1.777625f, 9.486475f, 4.315527f, -5.819323f, 6.669772f, 7.406138f, 1.840913f, -5.069254f, -4.662124f, 1.429919f, 2.312228f, 1.894506f, 4.002647f, -2.471290f, 3.092355f, 8.995118f, -6.832745f, -7.180799f, -9.895802f, -1.226762f, 8.148408f, 8.476361f, -2.961623f, -3.141699f, -1.590093f, 3.858279f, 9.445776f, -9.071755f, 1.900721f, -5.768493f, -9.415441f, 8.416057f, -5.346045f, 8.678267f, -8.282100f, -5.655635f, -8.897628f, -6.697055f, 5.718523f, -7.679560f, -5.448191f, 8.388706f, -6.593254f, -9.717238f, -4.816210f, -9.279507f, -2.812748f, -4.833152f, -8.197318f, 7.041663f, -8.389684f, -8.628577f, 6.978508f, 6.262721f, 6.997181f, 2.986010f, -1.663766f, -8.509258f, -8.747826f, -3.674885f, -7.758535f, 2.917220f, -0.906178f, 3.206554f, 1.033761f, -3.603154f, 9.419771f, 5.234313f, -2.210029f, 2.375014f, -5.089551f, 7.884052f, 4.385160f, 5.780802f, 3.068888f, 0.917186f, 1.824817f, 9.008223f, -0.388029f, -1.137270f, 5.176605f, 4.774179f, -5.765751f, -2.855355f, 2.849812f};

static const float input_5_scale = 0.0780232996f;
static const float input_5_zero_point = 0.0123400558f;
static const int8_t input_5_scales_frac[] = {18};
static const int input_5_sa_dim = -1;

static const int input_5_fx8_frac = 3;

#define INPUT_5_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {2, 511}, \
    /* .rank =  */ 2


static const mli_tensor input_5_tsr_fx16 = {
    INPUT_5_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_5_tsr_sa8 = {
    INPUT_5_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const float input_6_data[] = {-2.973973f, 8.345164f, 9.814803f, -8.783148f, 6.487111f, -1.587311f, -8.693662f, 6.917834f, -5.283478f, 2.322010f, 3.156545f, -7.984321f, -1.682133f, -6.242321f, -8.737660f, -2.414437f, -6.748063f, 3.303449f, -8.962575f, 9.776101f, -3.521120f, 8.611057f, -3.363866f, 4.327099f, 5.779038f, 6.820504f, -5.001488f, -0.730769f, -3.542674f, -7.653728f, 2.932566f, 8.384708f, -4.148958f, -6.212982f, 6.719495f, 2.330008f, -1.337481f, -4.835024f, -4.020829f, -9.547322f, 1.132465f, 6.198607f, 9.282323f, -7.528074f, -2.048848f, -0.378692f, -2.684704f, -1.768943f, -7.376501f, -5.386936f, 0.395791f, -6.445779f, 8.570757f, -2.614116f, 1.883462f, 6.491048f, 8.308339f, -7.772751f, 3.599362f, -5.461101f, 9.685594f, 8.256006f, 2.896073f, -9.782518f, -8.187453f, 3.566841f, -9.160158f, -1.820792f, 2.429463f, -3.926900f, 1.240519f, -5.746591f, 3.984085f, -4.688322f, -6.710840f, 5.022303f, 0.756024f, -1.330855f, 8.347283f, -1.792822f, 7.902921f, -4.007802f, 9.256721f, -4.210599f, 7.099341f, 5.566617f, 9.422159f, -5.343332f, 7.152396f, 5.487284f, 7.895753f, -0.071326f, -0.801937f, 6.163193f, -5.926269f, 9.692161f, -1.020183f, 6.859895f, -4.957151f, 4.777507f, 4.242137f, -3.389772f, 5.011165f, -9.607696f, -8.003074f, 9.340695f, 8.174118f, 1.052552f, -8.989808f, 2.700919f, 8.892146f, 6.668196f, 3.536768f, -6.754932f, -0.130987f, 6.272733f, -5.233490f, 4.059408f, 3.960710f, 8.589613f, 4.523991f, -9.775468f, 1.078031f, -1.930212f, -1.835318f, -8.076452f, -4.225785f, -6.307610f, 0.611336f, 6.126617f, -3.727919f, -3.457792f, -7.380948f, 2.571326f, -0.915550f, -0.447747f, -1.292322f, 0.620961f, 9.125393f, 7.522789f, 5.314329f, 3.130203f, 4.109835f, 5.548754f, 1.277902f, -5.404450f, -7.530876f, 5.881970f, 3.408392f, -7.929009f, 1.908582f, 5.147926f, 6.597326f, -3.338596f, -9.152309f, 1.645457f, -4.271221f, 5.117760f, -7.199869f, -7.993868f, -1.037084f, -2.734242f, -9.718563f, -3.426719f, 5.712408f, -1.968806f, 9.183351f, 9.177596f, 9.021349f, 6.593397f, 7.357878f, -4.114572f, -8.968210f, 6.692783f, 4.284024f, -7.543780f, 2.843486f, 1.810533f, -6.540289f, 1.669555f, -5.802058f, 2.670418f, -0.819697f, -1.329245f, 4.555228f, -3.777803f, 6.955788f, -5.675945f, 4.179500f, -4.048426f, -8.319292f, -3.678239f, -6.118395f, 4.443455f, -4.154669f, 2.163466f, 2.063200f, -9.569216f, -9.570475f, -5.163309f, 8.117505f, -4.867863f, 4.676877f, -2.599305f, -9.615712f, -8.222107f, -8.707228f, 4.712917f, 9.905319f, -4.833554f, 7.585221f, -7.996581f, -8.744919f, -5.382584f, -4.214764f, -4.871693f, -5.023991f, -1.651639f, 2.967628f, -1.480015f, -4.140700f, 4.455285f, -1.636002f, -3.249171f, -8.904606f, -9.622673f, 3.355116f, 0.132725f, 8.781988f, -9.985720f, -0.363968f, 0.665301f, 3.178650f, 1.926920f, -6.752778f, -9.117660f, -6.712156f, -4.914651f, 5.813127f, 3.779642f, -1.179675f, 9.723095f, 1.447657f, -2.936661f, -7.563350f, -8.609089f, -2.266569f, 2.623946f, -7.858017f, -9.215409f, 6.539836f, 3.910034f, 5.913522f, -6.438983f, -6.854965f, 6.936136f, 1.717307f, -4.466308f, -8.610806f, -6.462953f, 3.253072f, -8.772832f, -7.688735f, -8.120821f, 5.609844f, 6.440184f, -7.387070f, 7.929648f, 1.967732f, -1.213582f, -6.141328f, 4.678285f, -7.742656f, 7.867124f, 9.249286f, 9.218974f, 3.224433f, 4.444377f, 4.090883f, 1.006097f, -1.699169f, 2.306453f, 7.682841f, 4.251424f, 0.473808f, 2.568908f, 8.912816f, 4.743229f, -5.923676f, -6.467596f, 8.360151f, -6.928509f, -0.444720f, 7.643298f, 6.869366f, -3.911368f, 5.158409f, 6.472510f, -1.013841f, -8.749793f, -9.797752f, 1.740884f, -3.018412f, -4.878336f, 6.845061f, 9.048938f, -7.053286f, -8.578955f, -5.278425f, 8.308802f, 6.521610f, 2.699888f, 8.813761f, -9.585483f, 4.658268f, 2.245219f, -9.570847f, -3.442143f, -8.970693f, 1.122602f, -7.816455f, -8.824375f, -9.246716f, 1.301250f, 9.231075f, 9.079286f, -8.387016f, -2.883072f, 4.568943f, -9.849135f, 3.016706f, -9.301790f, -4.622986f, 2.585141f, -0.841959f, 9.359176f, 4.752443f, 2.300816f, -5.410795f, -4.363901f, 8.223841f, -5.967061f, 3.756252f, 7.226819f, 4.176661f, -9.909097f, 1.492839f, 2.711741f, 8.909648f, 9.250482f, 2.592406f, 2.752850f, 1.850422f, -1.584506f, 3.063080f, -5.230980f, 9.046090f, -1.082542f, -3.275579f, 3.266148f, 0.064132f, 1.462951f, -4.834935f, 1.559199f, -8.474282f, 9.560126f, -1.625619f, 3.192059f, -1.859309f, -3.257615f, 2.970533f, 7.631582f, -8.033578f, 8.710437f, -5.621576f, -6.463988f, 0.516404f, 6.993373f, 5.206027f, -5.602699f, -8.327205f, -1.863085f, 0.653497f, -1.517853f, -3.761689f, -6.969950f, 1.869666f, 6.543541f, 9.479650f, -8.359603f, 8.042213f, -4.145388f, -0.553901f, 9.578629f, 6.207021f, 0.624751f, -4.668180f, 9.174184f, 5.352285f, 0.130448f, -1.655266f, -2.493537f, -8.625920f, -6.289847f, 1.022803f, -3.208222f, -0.721018f, 3.479540f, -5.557083f, -4.472279f, 8.499929f, -3.400006f, 5.516704f, 5.776803f, 7.277848f, 3.580654f, -6.699065f, -0.090752f, -0.865824f, 8.404223f, -8.949884f, 5.567110f, -9.222445f, -4.251027f, -2.402161f, -0.461436f, 6.689583f, 4.937867f, -6.469651f, -8.458768f, 7.222099f, -6.540192f, 5.533606f, 1.098496f, 0.250533f, 1.838293f, -3.452246f, -4.200006f, 3.961691f, 9.119471f, 9.780131f, -1.757547f, -4.847825f, -4.351698f, 0.173453f, 1.894124f, -6.986151f, 3.844845f, -2.416808f, 5.784894f, 3.923498f, -8.605474f, 5.185423f, 2.949992f, -9.831043f, -6.413473f, -1.008860f, -1.710183f, 0.000175f, -4.349162f, 1.790095f, -7.753132f, -2.856075f, -6.901948f, 6.026219f, -2.309796f, -6.941277f, -8.119904f, 8.213866f, 1.220420f, -1.042629f, -8.864711f, -6.966767f, 4.729241f, 4.057805f, -4.478731f, 3.181036f, -8.420785f, -1.284543f, -6.421209f};

static const float input_6_scale = 0.0780040771f;
static const float input_6_zero_point = -0.0402003601f;
static const int8_t input_6_scales_frac[] = {18};
static const int input_6_sa_dim = -1;

static const int input_6_fx8_frac = 3;

#define INPUT_6_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {2}, \
    /* .shape = */ {480}, \
    /* .rank =  */ 1


static const mli_tensor input_6_tsr_fx16 = {
    INPUT_6_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_6_tsr_sa8 = {
    INPUT_6_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const float input_7_data[] = {-4.878436f, -7.395096f, 3.502902f, 3.066636f, -1.267513f, 0.687639f, -3.612669f, -9.556050f, -3.146229f, -7.110948f, -0.280012f, 3.058574f, -8.819986f, -5.537123f, -6.281544f, 2.989858f, 7.955292f, 5.823961f, -7.971833f, -4.189186f, 7.772958f, 7.466426f, -5.372329f, -7.888477f, -9.699741f, 9.891283f, 5.662372f, 7.644859f, 0.165369f, -5.117995f, 8.386495f, -0.875498f, -5.832725f, -4.996844f, 0.813523f, 2.192657f, 3.017723f, 5.427687f, 6.793137f, -1.431333f, -1.509638f, 0.311608f, -9.591160f, -6.468076f, -2.049214f, -4.344685f, 7.438586f, 8.886640f, -2.178604f, 2.945266f, 7.674323f, -9.086794f, 6.528092f, -5.375153f, 4.188565f, -5.949110f, -8.896793f, -2.122120f, 5.961647f, 4.504946f, -0.659628f, -4.648675f, -8.268918f, -3.724011f, 7.846101f, 6.851133f, -0.900115f, 9.786948f, -4.390333f, 0.073509f, 4.512091f, 3.120803f, 3.931480f, -9.178191f, 3.115230f, 5.376055f, -7.422177f, 7.420809f, 8.057107f, 6.995547f, 2.786249f, -2.912335f, 8.608147f, -3.140531f, -1.648767f, 3.060450f, 1.428493f, -7.967688f, 5.351581f, 3.923883f, -1.306387f, 1.187608f, 0.100799f, 1.017964f, 4.947611f, 2.513507f, 2.267589f, 1.131200f, -7.272179f, -2.563471f, -5.948069f, -0.716886f, 6.942408f, 3.201476f, -7.282286f, -9.328220f, -8.952540f, -7.294834f, -1.005903f, 0.637505f, 8.594633f, 0.340980f, -6.347251f, -0.461284f, -4.695862f, -9.152178f, 2.204017f, 2.023536f, 3.369097f, -9.600319f, 0.764870f, 5.458864f, 0.562610f, 9.761547f, -3.598769f, 9.229881f, 9.587633f, -7.387765f};

static const float input_7_scale = 0.0768275484f;
static const float input_7_zero_point = 0.0957712606f;
static const int8_t input_7_scales_frac[] = {18};
static const int input_7_sa_dim = -1;


static const int input_7_fx8_frac = 3;

#define INPUT_7_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {8, 16}, \
    /* .rank =  */ 2


static const mli_tensor input_7_tsr_fx16 = {
    INPUT_7_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_7_tsr_sa8 = {
    INPUT_7_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_7_tsr_sa32 = {
    INPUT_7_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

static const float input_8_data[] = {6.896620f, 5.017817f, -8.066476f, -8.634307f, -0.253766f, 1.147634f, 6.647752f, -4.462595f, -4.660400f, -6.427618f, 7.492020f, -2.073655f, -1.070723f, 7.711472f, -9.290180f, -2.514716f, -6.500135f, 5.871485f, 7.953654f, -6.486901f, 6.018667f, -2.808299f, -3.529411f, -5.937965f, -5.049949f, -1.091060f, 8.109649f, 7.914063f, -5.430245f, 8.891557f, -3.276412f, 5.083888f, -1.397900f, 1.557856f, -1.581833f, 9.482749f, 8.073631f, 9.334879f, 6.745706f, 2.391850f, -5.203277f, -7.505075f, 5.285886f, -3.818868f, 8.892898f, 2.480311f, -5.634418f, -1.301055f, 6.122534f, -2.987919f, -0.362588f, 6.947688f, -0.240116f, -2.133151f, -9.911258f, 5.737805f, 6.040893f, -2.342940f, 5.687525f, -6.008956f, 7.570986f, 0.052112f, 6.685386f, -7.551770f, -8.363645f, -0.233209f, 0.215943f, -0.650878f, -4.751605f, -7.573537f, 7.539813f, 3.629723f, -9.527970f, -8.267314f, -5.976191f, -7.836982f, -7.983540f, -1.567036f, 0.020462f, 9.547956f, -1.034184f, -4.415512f, -1.945856f, 3.639783f, -9.423211f, 1.816152f, -5.803130f, -0.038982f, 4.930053f, 3.287229f, -5.557698f, 7.123075f, 6.522538f, -5.385271f, 9.897015f, 5.203281f, 7.586868f, -0.954509f, 8.496125f, -3.080887f, 9.175385f, 7.066346f, 7.842045f, -9.329586f, 4.551440f, -4.367018f, 6.392644f, -4.386444f, 4.170858f, -8.934361f, -9.855330f, 7.778330f, 4.155975f, 1.384070f, 9.435466f, -1.349597f, 5.661473f, 7.487829f, 0.994093f, -6.409233f, 5.698713f, -5.827378f, 0.259062f, 4.086011f, 8.722012f, 1.456490f, 4.148987f, 6.797123f, 1.708868f, 7.535503f, -8.679553f, -9.606608f, -0.873674f, 6.533833f, -8.620344f, -4.489331f, -3.990441f, 9.105019f, 2.077738f, -9.895355f, 2.325096f, -9.924365f, 5.658746f, -9.928204f, 6.885140f, -9.713080f, -0.208717f, -1.557505f, -4.895243f, -5.024247f, -4.921583f, 3.007906f, -7.658596f, -1.354588f, -2.303601f, -8.570698f, 7.561852f, 0.443755f, -7.209576f, -2.319679f, -5.343140f, -8.864961f, 1.597350f, 2.487865f, -7.243680f, 4.968725f, 3.187017f, 1.003700f, -6.417071f, 7.177044f, -4.643527f, -0.200754f, -0.294853f, 1.804915f, -5.505342f, 7.385958f, -5.973266f, -9.268578f, 8.909695f, -0.811869f, 3.662891f, -9.017704f, -2.412937f, -7.426233f, 8.963854f, 2.073846f, -3.116554f, -0.833382f, -6.214946f, 5.459074f, -7.916763f, 0.443226f, 7.009363f, -0.877593f, 1.609084f, 8.551493f, 1.442412f, -4.250640f, -5.509465f, 9.960689f, -1.642318f, 3.331704f, -2.060715f, -1.162346f, 4.822702f, -3.400180f, 5.986585f, -1.477067f, -0.609962f, -9.791373f, -3.568621f, 5.116015f, 1.669326f, -7.739011f, -3.979483f, 5.571845f, -3.892851f, 4.445093f, 1.965682f, -1.802804f, 2.112475f, 0.964672f, -3.501478f, 2.091544f, -6.474464f, -0.049186f, -0.618497f, -6.845955f, -8.565456f, 7.932342f, 4.092272f, 1.936499f, 3.814781f, 8.075923f, 1.328634f, 2.362334f, -6.025274f, 3.697861f, -5.738793f, -8.609955f, 4.164873f, 4.718280f, -7.073604f, 0.936693f, -5.703780f, -1.079131f, 5.205464f, 7.516794f, -5.144438f, -7.962859f, -5.755075f, -9.668837f, -2.750756f, -4.457274f, -6.480481f, 1.193661f, 4.480965f, 1.898828f, 3.110340f, -9.689905f, 7.707057f, 3.380865f, -7.368063f, 3.209457f, -1.818767f, 3.339142f, -8.336568f, -1.922140f, 7.847517f, -4.733147f, -0.394813f, 7.577091f, 1.309764f, -4.934332f, -1.070663f, 2.890285f, -2.620322f, -0.349229f, 8.177575f, -5.907150f, -3.510306f, 7.687844f, -7.211148f, -3.387090f, -6.590643f, -4.177405f, -7.295873f, 8.941761f, 0.735363f, -3.557803f, 1.785692f, -1.737686f, -0.173640f, 1.896961f, -7.412292f, 9.291401f, -3.152137f, 1.783933f, -9.761061f, -7.653106f, 8.733760f, -8.570860f, -5.471711f, -2.113633f, 2.103628f, -2.853325f, -2.541057f, 0.282851f, 1.574089f, 3.224445f, 9.958790f, 5.476827f, -3.743977f, 5.114369f, 3.969358f, -5.142145f, 2.854996f, -6.749223f, -4.119677f, -8.668517f, 4.353416f, 0.809359f, -1.356357f, -9.529791f, 7.259870f, -5.388498f, -0.395727f, -3.472272f, -8.085985f, 5.888501f, -3.585465f, 7.010170f, -6.292253f, 0.580708f, 0.303310f, -2.983998f, -5.402188f, -8.297124f, -0.515872f, 2.448484f, 3.377737f, -4.632721f, 0.877434f, 3.892808f, 9.391342f, -6.135832f, -0.411825f, 2.928942f, -0.458772f, 4.586382f, -5.263455f, 7.799173f, -4.442979f, 2.488575f, 4.990580f, 8.945833f, -5.437402f, -4.252414f, -2.855911f, -1.689063f, 2.961447f, 8.479655f, -2.273559f, -9.924398f, 1.656858f, 0.718661f, 2.864293f, 5.928490f, 8.769195f, -5.903810f, -0.082353f, -2.106058f, 6.474615f, 2.848124f, 8.793281f, -5.081678f, -1.717730f, 2.149817f, 6.224315f, -6.510669f, -8.749630f, 4.136892f, 6.330726f, -6.578631f, 9.660663f, -2.991224f, -1.820708f, 1.059412f, 1.447225f, -7.016158f, -8.981616f, 4.500871f, 3.595194f, -8.595329f, -8.805208f, 2.231622f, -0.051033f, -8.163252f, -3.063311f, -9.272034f, 3.904627f, -1.976130f, 3.846112f, 2.389580f, 1.523840f, -8.401927f, -6.293820f, 8.835791f, -5.699935f, 3.894194f, -4.819075f, 8.441129f, 5.619572f, 2.022750f, 3.428177f, -1.759706f, 2.346321f, 1.019881f, 0.542554f, 3.452406f, -2.606513f, -9.721445f, 7.308873f, 8.067007f, -3.005035f, 2.641512f, 2.926122f, 8.983990f, 7.594912f, -8.253208f, 2.860018f, -2.889611f, 1.356388f, -8.604073f, -4.594698f, 8.323949f, -6.216546f, -2.571607f, -2.451547f, -5.159607f, 3.812139f, 3.264674f, -0.639303f, 5.253313f, 5.336285f, -7.546276f, -2.218289f, 2.708594f, -9.477895f, 3.677104f, 7.617862f, 7.453026f, -9.300993f, -3.771752f, -7.337926f, 3.686868f, 7.999029f, -9.312894f, 1.964045f, 6.553044f, -6.189804f, 0.421513f, 8.175687f, 6.727620f, 1.041798f, 5.744739f, -4.019431f, 8.450041f, -3.914009f, -0.079527f, 1.735808f, 4.583303f, 0.783877f, 7.396904f, -8.109146f, 8.127158f, 0.194024f, -5.272222f, 6.287583f, -6.666986f};

static const float input_8_scale = 0.0779956579f;
static const float input_8_zero_point = 0.0162426252f;
static const int8_t input_8_scales_frac[] = {18};
static const int input_8_sa_dim = -1;

static const int input_8_fx8_frac = 3;

#define INPUT_8_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {480}, \
    /* .rank =  */ 1


static const mli_tensor input_8_tsr_fx16 = {
    INPUT_8_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_8_tsr_sa8 = {
    INPUT_8_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_8_tsr_sa32 = {
    INPUT_8_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};



static const float test_1_out_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float test_1_out_scales[] = {0.1389700770f, 0.1210434511f, 0.1394459009f, 0.1419170946f, 0.1500582844f, 0.1383515149f, 0.1498492807f, 0.1461481899f};
static const float test_1_out_zero_points[] = {-0.1127522215f, -2.0054848194f, 0.7046295404f, -0.1974012405f, 0.0896190554f, 1.0528359413f, -0.2535052598f, -0.6430486441f};
static const int8_t test_1_out_scales_frac[] = {17, 18, 17, 17, 17, 17, 17, 17};
static const int test_1_out_sa_dim = 1;

static const int test_1_out_fx8_frac = 3;

#define TEST_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {16, 8}, \
    /* .rank =  */ 2


static const mli_tensor test_1_out_tsr_fx16 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_1_out_tsr_sa8 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_2_out_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float test_2_out_scale = 0.0774965286f;
static const float test_2_out_zero_point = -0.0426510200f;
static const int8_t test_2_out_scales_frac[] = {18};
static const int test_2_out_sa_dim = -1;

static const int test_2_out_fx8_frac = 3;

#define TEST_2_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {(((((2 * 1) + 2) * 4) + 5) * 8) + 4, (((2 * 1) + 2) * 4) + 5, (2 * 1) + 2, 1}, \
    /* .shape = */ {2, 8, 4, 2}, \
    /* .rank =  */ 4


static const mli_tensor test_2_out_tsr_fx16 = {
    TEST_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_2_out_tsr_sa8 = {
    TEST_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_3_out_data[] = {3.373433f, 3.015400f, -9.499326f, 7.141538f, 9.559444f, 5.302596f, -6.855545f, 1.136173f, 3.412143f, 0.712972f, 8.923663f, 8.486315f, -5.785887f, 0.653820f, 0.562406f, 1.477235f, 2.538625f, 2.979376f, -0.526883f, -8.592014f, -5.122587f, -5.243422f, 3.685569f, -2.745420f, 7.932405f, 1.841004f, -9.768934f, 6.639832f, 0.886253f, 5.747538f, 2.998558f, -0.232435f, 7.815877f, 8.667622f, 9.261924f, 4.176519f};

static const float test_3_out_scale = 0.0774965286f;
static const float test_3_out_zero_point = -0.0426510200f;
static const int8_t test_3_out_scales_frac[] = {18};
static const int test_3_out_sa_dim = -1;

static const int test_3_out_fx8_frac = 3;

#define TEST_3_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {(((2*1)+2) * 6) + 4 , (2 * 1) + 2, 1}, \
    /* .shape = */ {3, 6, 2}, \
    /* .rank =  */ 3

static const mli_tensor test_3_out_tsr_fx16 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_3_out_tsr_sa8 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_4_out_data[] = {-5.677971f, -8.153761f, -0.766472f, 9.538500f, -4.584099f, -1.775992f, 2.067779f, 6.607456f, 2.170470f, 8.906460f, 7.358037f, 9.294816f, 9.906050f, -4.447608f, -1.396862f, 5.613991f, 3.233921f, 5.625544f, 3.590378f, 0.785354f, 5.957815f, 6.469064f, -8.108619f, 0.404841f, 1.338598f, 1.904888f, 4.330654f, 9.571881f, 6.460084f, 5.518643f, -2.856814f, 0.938610f, 9.823357f, -9.464392f, -3.989903f, 5.527686f, -6.829944f, -7.715214f, 8.348755f, -3.600683f, -0.862380f, 4.869676f, 8.599991f, 4.453541f, 2.263217f, -1.520693f, 0.468968f, -4.187222f, 7.082358f, 7.512115f, -5.603360f, 2.246333f, -6.620296f, 0.094779f, 6.002832f, -9.676041f, -5.786794f, 6.011887f, 8.701946f, -2.226193f, 3.299322f, -1.331206f, -9.656604f, 2.005795f, 4.446951f, 3.050912f, 1.572199f, -1.686260f, -6.481040f, -5.775273f, -2.611823f, 1.868704f, -6.403462f, 1.703931f, -9.242681f, 4.498577f, 5.854120f, -5.115741f, -8.492638f, 9.477542f, 1.666802f, -7.261979f, 8.410984f, 3.271845f, 9.135104f, -8.100331f, 7.503844f, 4.223914f, 3.330936f, -0.663254f, 7.768801f, -3.512501f, 4.253969f, -0.608870f, 2.038497f, -9.236372f, 1.552422f, -4.432633f, 7.017313f, 7.985128f, -2.090755f, 3.017067f, -6.707868f, 9.153774f, -4.594815f, 9.664414f, 5.753538f, -3.720052f, -3.690043f, -3.659026f, 9.799613f, -3.247671f, 1.148462f, -1.586028f, -8.020000f, -0.213343f, -1.916719f, -2.078868f, 8.360701f, 6.507407f, 7.004696f, 6.329893f, -6.419595f, 1.713196f, 7.667171f, 1.934591f, 1.046189f, -2.991860f, -6.014396f, -7.698043f, -1.985795f, 7.282751f, -9.193420f, -7.818548f, 8.414138f, -2.802992f, -7.504256f, 2.779549f, 9.557887f, 8.964392f, -3.089199f, -9.877031f, 4.093199f, 5.189296f, -0.204254f, -3.591159f, 4.057684f, -1.210571f, 3.507482f, -0.804594f, -1.285351f, -0.828776f, 6.718447f, -0.014425f, 4.174708f, -2.172441f, 7.768841f, -8.224863f, -2.404097f, 1.106820f, 7.121806f, 8.116035f, 9.766237f, 2.989537f, -7.398094f, 1.483465f, 1.271458f, 0.449592f, 4.087910f, 6.260201f, 0.293504f, 6.712609f, -1.487121f, -6.417415f, 8.811097f, -0.120731f, -5.892851f, 6.431621f, -3.927004f, 6.720926f, -7.512352f, -6.529250f, 9.045397f, 8.183925f, -9.949924f, 0.390185f, -7.234607f, 8.185486f, 7.350524f, -4.472638f, 5.795193f, 7.682129f, -0.733290f, 6.860265f, -3.031835f, 4.903344f, -0.302244f, -1.377696f, 9.831554f, 1.950990f, 5.652107f, 9.829046f, 7.791945f, -9.573422f, -8.544555f, -9.378413f, 2.017197f, -4.925191f, -2.622188f, -6.842234f, -1.341665f, 8.080262f, -2.325159f, -0.681202f, 2.747170f, -0.582677f, 9.782668f, -4.542638f, 2.447209f, 1.228065f, 9.994590f, -3.732278f, 9.039649f, 3.900668f, -8.593764f, 5.317302f, -5.066335f, 2.944128f, 1.742661f, -2.963471f, -3.452471f, 4.778586f, 5.760832f, -2.688455f, 4.442910f, -9.287615f, -5.136648f, 9.360343f, -5.151053f, -4.045050f, -8.680413f, 0.872537f, -8.827797f, 2.028719f, -1.618375f, -0.144571f, -1.388409f, 9.227581f, -3.442926f, 1.168332f, 5.879224f, -3.134532f, 7.099503f, -3.308268f, 3.787079f, -2.615127f, 3.114843f, 5.807198f, -7.404858f, -5.098031f, 2.882770f, -1.935874f, 0.921767f, -0.819618f, 8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, 3.544537f, -0.162187f, 1.792119f, 3.318172f, 8.569760f, -6.205991f, 8.194670f, 3.531123f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 2.151938f, 1.912831f, 6.533755f, -6.903935f, -9.051265f, -1.639524f, -6.982241f, 5.701826f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, 3.849112f, 8.931726f, -5.438175f, -4.371706f, -2.442018f, -4.478988f, 7.750277f, -9.845109f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 7.046386f, -0.015543f, 3.354408f, -8.754382f, 0.031418f, 6.994902f, 9.397586f, -2.592650f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 7.950565f, -6.884567f, 3.821530f, 6.172273f, -9.898743f, 2.108236f, -6.002132f, 1.921893f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, -8.434646f, 2.471661f, 8.931950f, 8.000952f, -2.280546f, 6.489319f, 3.183421f, -8.773334f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.097145f, -4.441912f, 9.120351f, 9.830294f, -1.570705f, -6.395310f, 1.572742f, -1.354816f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -2.210845f, 0.297913f, 7.655096f, 9.671779f, -0.467295f, 0.510133f, 8.457658f, -1.639249f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, 4.096213f, 2.041794f, 4.007059f, -8.922754f, -3.496866f, -4.366773f, 6.974488f, -7.352166f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, -7.128151f, 3.529874f, 0.789401f, 9.651205f, -1.575951f, -9.117122f, -3.486454f, -3.566978f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, -4.901549f, -0.343528f, -6.225574f, -4.794688f, -2.300989f, 9.833711f, 9.580105f, -0.545670f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, 8.602400f, -6.349031f, 7.753200f, -8.643244f, 1.827947f, 1.685329f, 7.887247f, 3.364064f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 0.557772f, 6.214385f, 0.420185f, 5.574824f, 2.124226f, 5.188842f, 0.515496f, -1.633155f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, 3.815864f, 9.408266f, -5.490026f, -2.227234f, -1.959321f, 7.418302f, -9.101833f, 4.831953f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 4.788203f, 3.424863f, 1.015572f, 0.651996f, 3.476342f, -7.484718f, -0.836903f, 8.398964f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float test_4_out_scale = 0.0782137737f;
static const float test_4_out_zero_point = 0.0223330315f;
static const int8_t test_4_out_scales_frac[] = {18};
static const int test_4_out_sa_dim = -1;

static const int test_4_out_fx8_frac = 3;

#define TEST_4_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {32, 16}, \
    /* .rank =  */ 2


static const mli_tensor test_4_out_tsr_fx16 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_4_out_tsr_sa8 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_5_out_data[] = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f};

static const float test_5_out_scale = 0.0774965286f;
static const float test_5_out_zero_point = -0.0426510200f;
static const int8_t test_5_out_scales_frac[] = {18};
static const int test_5_out_sa_dim = -1;

static const int test_5_out_fx8_frac = 3;

#define TEST_5_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {8, 14, 4}, \
    /* .rank =  */ 3


static const mli_tensor test_5_out_tsr_fx16 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_5_out_tsr_sa8 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_6_out_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f};

static const float test_6_out_scale = 0.0774965286f;
static const float test_6_out_zero_point = -0.0426510200f;
static const int8_t test_6_out_scales_frac[] = {18};
static const int test_6_out_sa_dim = -1;

static const int test_6_out_fx8_frac = 3;

#define TEST_6_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 2, 8, 2}, \
    /* .rank =  */ 4


static const mli_tensor test_6_out_tsr_fx16 = {
    TEST_6_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_6_out_tsr_sa8 = {
    TEST_6_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_7_out_data[] = {8.286820f, 5.760523f, -9.439082f, 0.086691f, 0.707713f, -1.140300f, 5.280867f, 8.735827f, 8.689197f, 0.179479f, 8.859151f, -9.198095f, 8.711848f, 9.559444f, 9.618321f, -6.855545f, -8.937352f, 3.259260f, -4.797753f, -7.777387f, 2.541792f, 2.538625f, -1.668876f, -0.526883f, -0.795467f, -8.150185f, 3.948650f, 4.190713f, -8.132678f, 0.886253f, -0.717055f, 2.998558f};

static const float test_7_out_scale = 0.0747349113f;
static const float test_7_out_zero_point = 0.0896190554f;
static const int8_t test_7_out_scales_frac[] = {18};
static const int test_7_out_sa_dim = -1;

static const int test_7_out_fx8_frac = 3;

#define TEST_7_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {8, 4}, \
    /* .rank =  */ 2


static const mli_tensor test_7_out_tsr_fx16 = {
    TEST_7_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_7_out_tsr_sa8 = {
    TEST_7_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_8_out_data[] = {8.286820f, 2.152027f, 5.760523f, -9.209137f, -9.439082f, 2.777630f, 0.086691f, -9.923459f, -6.820004f, -1.362363f, 1.118086f, 2.201777f, 0.450819f, -3.447689f, -4.574860f, 0.236707f, 0.707713f, 5.680774f, -1.140300f, 8.814334f, 5.280867f, -2.641193f, 8.735827f, 3.382713f, -0.028107f, -1.362890f, -3.054990f, -6.572820f, 0.709137f, -7.732485f, -1.467243f, -0.805623f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 8.689197f, -2.427501f, 0.179479f, 5.904660f, 8.859151f, 1.512121f, -9.198095f, 4.772271f, 8.437635f, 3.685844f, 3.373433f, 3.015400f, -1.919783f, 0.743432f, -9.499326f, 7.141538f, 8.711848f, -9.691744f, 9.559444f, 5.302596f, 9.618321f, 9.830359f, -6.855545f, 1.136173f, -2.964916f, -5.046844f, 3.412143f, 0.712972f, -1.474889f, 7.401769f, 8.923663f, 8.486315f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -8.937352f, -6.372196f, 3.259260f, 5.393515f, -4.797753f, -4.907107f, -7.777387f, -2.044802f, -3.196458f, 0.084552f, -5.785887f, 0.653820f, 4.551648f, -6.382569f, 0.562406f, 1.477235f, 2.541792f, 0.210185f, 2.538625f, 2.979376f, -1.668876f, 3.617727f, -0.526883f, -8.592014f, 6.895158f, 3.578593f, -5.122587f, -5.243422f, -9.385137f, 3.870499f, 3.685569f, -2.745420f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.795467f, 2.039002f, -8.150185f, -6.949403f, 3.948650f, 1.120372f, 4.190713f, 8.637361f, 8.664962f, -5.665703f, 7.932405f, 1.841004f, 0.627123f, 9.838157f, -9.768934f, 6.639832f, -8.132678f, -8.665508f, 0.886253f, 5.747538f, -0.717055f, -0.288050f, 2.998558f, -0.232435f, 0.593799f, -7.742426f, 7.815877f, 8.667622f, -9.198464f, 5.888268f, 9.261924f, 4.176519f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f};

static const float test_8_out_scale = 0.0774965286f;
static const float test_8_out_zero_point = -0.0426510200f;
static const int8_t test_8_out_scales_frac[] = {18};
static const int test_8_out_sa_dim = -1;

static const int test_8_out_fx8_frac = 3;

#define TEST_8_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {5, 9, 4}, \
    /* .rank =  */ 3


static const mli_tensor test_8_out_tsr_fx16 = {
    TEST_8_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_8_out_tsr_sa8 = {
    TEST_8_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_9_out_data[] = {8.286820f, 8.689197f, -8.937352f, -0.795467f, 5.760523f, 0.179479f, 3.259260f, -8.150185f, -9.439082f, 8.859151f, -4.797753f, 3.948650f, 0.086691f, -9.198095f, -7.777387f, 4.190713f};

static const float test_9_out_scale = 0.0717577785f;
static const float test_9_out_zero_point = -0.2899658680f;
static const int8_t test_9_out_scales_frac[] = {18};
static const int test_9_out_sa_dim = -1;

static const int test_9_out_fx8_frac = 3;

#define TEST_9_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {(4*1) + 4, 1}, \
    /* .shape = */ {4, 4}, \
    /* .rank =  */ 2

static const mli_tensor test_9_out_tsr_fx16 = {
    TEST_9_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_9_out_tsr_sa8 = {
    TEST_9_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_10_out_data[] = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 8.286820f, -6.820004f, 0.707713f, -0.028107f, 0.000000f, -8.937352f, -3.196458f, 2.541792f, 6.895158f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 5.760523f, 1.118086f, -1.140300f, -3.054990f, 0.000000f, 3.259260f, -5.785887f, 2.538625f, -5.122587f, 0.000000f};

static const float test_10_out_scale = 0.0774955750f;
static const float test_10_out_zero_point = -0.3252663314f;
static const int8_t test_10_out_scales_frac[] = {18};
static const int test_10_out_sa_dim = -1;

static const int test_10_out_fx8_frac = 3;

#define TEST_10_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {2, 3, 5}, \
    /* .rank =  */ 3


static const mli_tensor test_10_out_tsr_fx16 = {
    TEST_10_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_10_out_tsr_sa8 = {
    TEST_10_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_11_out_data[] = {0.000000f, -9.773581f, -8.846663f, 9.353249f, -9.617800f, 0.686743f, 4.927867f, 8.443638f, 8.941276f, 1.562038f, 4.223790f, 0.843526f, 0.930239f, -9.260583f, -3.263134f, 2.416644f, 5.593678f, -3.521997f, 1.649245f, 7.650075f, -1.975210f, -0.739258f, -9.531282f, -1.546692f, -6.112641f, 4.552503f, -2.979941f, 0.591521f, 3.662940f, -9.659819f, -4.588802f, -8.906449f, 8.250141f, 4.170882f, -9.299482f, -4.022147f, 1.857983f, -2.484563f, 9.206396f, 0.351409f, 6.671466f, -5.914721f, -7.626552f, -2.825001f, -9.657745f, -2.011406f, 7.688596f, 4.627152f, -3.935548f, -5.901428f, 7.941267f, -2.267255f, -0.918066f, 3.872615f, 8.842041f, 4.668867f, -3.046755f, -0.291582f, 7.460817f, -7.713502f, 1.890590f, 3.820248f, -5.777347f, 0.747617f, -1.081044f, -5.388240f, 9.810171f, 6.387306f, -9.355461f, -1.389754f, -6.616431f, 0.884584f, 7.234724f, -5.610569f, 2.935291f, -6.083329f, -7.403290f, 0.339438f, -1.162215f, -4.137796f, -7.406723f, -2.999998f, -7.452991f, 1.299939f, -4.331118f, -7.804892f, 6.225497f, 1.140638f, 4.248531f, -7.517857f, 1.058626f, 9.146852f, -1.504319f, 9.055251f, -2.519755f, -0.930571f, 9.538403f, 0.126073f, -3.812277f, 0.806761f, 1.156582f, 7.660976f, -5.033093f, -0.146709f, 5.170570f, 2.360290f, -6.958299f, -1.434452f, -1.788751f, -6.496607f, 7.059323f, -3.381967f, -4.401856f, -9.890413f, 5.169014f, 9.508187f, 0.656188f, 6.154734f, -9.908562f, -4.020619f, -8.315347f, 5.043190f, -7.478724f, -0.945403f, -1.939760f, 3.366251f, -5.734836f, 0.465065f, -0.104497f, 9.419497f, -9.212864f, 5.035935f, 5.187710f, -1.365995f, 5.472907f, -0.577883f, -9.819709f, 6.163215f, -4.804966f, -1.143795f, -5.633023f, -6.762589f, 6.864445f, 5.135204f, 0.992086f, 8.151305f, -9.029054f, -9.474216f, -7.700157f, -0.687943f, -1.708031f, 2.091445f, 5.316317f, -0.141867f, 5.235709f, 2.988321f, 8.337017f, 7.488380f, 3.312734f, -5.980095f, -2.402671f, -3.170138f, 8.905935f, -5.920940f, -7.835442f, -9.736161f, 3.923055f, 9.432754f, 3.127231f, -9.340849f, -0.059618f, 0.000000f, 0.000000f, 0.000000f, -7.040846f, -2.572819f, 9.391225f, 3.789057f, -8.062175f, -4.555697f, -2.848366f, -0.278216f, -4.579997f, -5.735403f, 0.818959f, 7.677201f, 2.706414f, -3.080515f, -0.949438f, -1.254968f, -2.299652f, -0.601207f, -4.898014f, 1.627571f, 5.005423f, -7.240181f, -3.814603f, -2.130626f, -8.422950f, 2.200722f, 8.292078f, -0.683281f, 7.897497f, 5.555844f, -2.330738f, -5.049287f, 5.516032f, 9.675670f, -8.310427f, 7.730741f, 0.130573f, 1.063902f, -1.722354f, -1.343454f, -8.232459f, 0.891846f, 7.591969f, 0.605086f, 4.581037f, -4.250980f, -6.843938f, -8.018553f, 3.454967f, 3.811460f, 3.026594f, -2.784677f, 3.992873f, -6.485449f, -3.814159f, 4.951274f, 6.285620f, -8.408609f, 9.465924f, -5.291278f, 9.365079f, -7.454721f, -1.152397f, 1.077173f, 4.117934f, -4.873161f, -1.893574f, -9.812736f, 6.520185f, -2.420222f, -3.530186f, -6.659910f, 4.551676f, -0.406192f, 8.324395f, 2.347896f, -3.652957f, 0.109311f, -5.799716f, 2.689782f, -0.977579f, -3.073907f, -5.307784f, -6.945848f, -0.122717f, 9.770892f, -3.229753f, 9.224800f, -1.578747f, -7.996580f, -7.733313f, -1.745909f, 0.042406f, -4.784834f, 8.615547f, 1.856787f, 5.995185f, -3.011347f, 3.693955f, -9.756651f, -1.150893f, -9.342932f, -1.846830f, -8.173842f, -2.147200f, -1.438887f, 9.929578f, -6.957812f, -9.117824f, 3.345230f, 7.814319f, -3.902140f, -0.672134f, 7.224915f, 0.480028f, 0.272811f, -8.789998f, -2.505690f, -6.023977f, -7.727905f, -6.638586f, 5.470634f, -5.343675f, -2.238170f, 7.956658f, 4.847352f, 1.472678f, 6.253847f, -8.657444f, 3.167908f, 0.031046f, 1.962482f, 5.301140f, 6.083952f, -4.171508f, 5.949595f, -3.304786f, -3.916917f, 1.126894f, 9.796067f, -8.272862f, -0.886477f, 9.486475f, 6.669772f, -5.069254f, 2.312228f, -2.471290f, -6.832745f, -1.226762f, -2.961623f, 3.858279f, 1.900721f, 8.416057f, -8.282100f, -6.697055f, -5.448191f, -9.717238f, -2.812748f, 7.041663f, 6.978508f, 2.986010f, -8.747826f, 2.917220f, 1.033761f, 5.234313f, -5.089551f, 5.780802f, 1.824817f, -1.137270f, -5.765751f, 0.000000f, 0.000000f};

static const float test_11_out_scale = 0.0780232996f;
static const float test_11_out_zero_point = 0.0123400558f;
static const int8_t test_11_out_scales_frac[] = {18};
static const int test_11_out_sa_dim = -1;

static const int test_11_out_fx8_frac = 3;

#define TEST_11_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {2, 173}, \
    /* .rank =  */ 2


static const mli_tensor test_11_out_tsr_fx16 = {
    TEST_11_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_11_out_tsr_sa8 = {
    TEST_11_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_12_out_data[] = {0.000000f, 0.000000f, 0.000000f, -2.973973f, -8.783148f, -8.693662f, 2.322010f, -1.682133f, -2.414437f, -8.962575f, 8.611057f, 5.779038f, -0.730769f, 2.932566f, -6.212982f, -1.337481f, -9.547322f, 9.282323f, -0.378692f, -7.376501f, -6.445779f, 1.883462f, -7.772751f, 9.685594f, -9.782518f, -9.160158f, -3.926900f, 3.984085f, 5.022303f, 8.347283f, -4.007802f, 7.099341f, -5.343332f, 7.895753f, 6.163193f, -1.020183f, 4.777507f, 5.011165f, 9.340695f, -8.989808f, 6.668196f, -0.130987f, 4.059408f, 4.523991f, -1.930212f, -4.225785f, 6.126617f, -7.380948f, -0.447747f, 9.125393f, 3.130203f, 1.277902f, 5.881970f, 1.908582f, -3.338596f, -4.271221f, -7.993868f, -9.718563f, -1.968806f, 9.021349f, -4.114572f, 4.284024f, 1.810533f, -5.802058f, -1.329245f, 6.955788f, -4.048426f, -6.118395f, 2.163466f, -9.570475f, -4.867863f, -9.615712f, 4.712917f, 7.585221f, -5.382584f, -5.023991f, -1.480015f, -1.636002f, -9.622673f, 8.781988f, 0.665301f, -6.752778f, -4.914651f, -1.179675f, -2.936661f, -2.266569f, -9.215409f, 5.913522f, 6.936136f, -8.610806f, -8.772832f, 5.609844f, 7.929648f, -6.141328f, 7.867124f, 3.224433f, 1.006097f, 7.682841f, 2.568908f, -5.923676f, -6.928509f, 6.869366f, 6.472510f, -9.797752f, -4.878336f, -7.053286f, 8.308802f, 8.813761f, 2.245219f, -8.970693f, -8.824375f, 9.231075f, -2.883072f, 3.016706f, 2.585141f, 4.752443f, -4.363901f, 3.756252f, -9.909097f, 8.909648f, 2.752850f, 3.063080f, -1.082542f, 0.064132f, 1.559199f, -1.625619f, -3.257615f, -8.033578f, -6.463988f, 5.206027f, -1.863085f, -3.761689f, 6.543541f, 8.042213f, 9.578629f, -4.668180f, 0.130448f, -8.625920f, -3.208222f, -5.557083f, -3.400006f, 7.277848f, -0.090752f, -8.949884f, -4.251027f, 6.689583f, -8.458768f, 5.533606f, 1.838293f, 3.961691f, -1.757547f, 0.173453f, 3.844845f, 3.923498f, 2.949992f, -1.008860f, -4.349162f, -2.856075f, -2.309796f, 8.213866f, -8.864711f, 4.057805f, -8.420785f, 0.000000f, 0.000000f};

static const float test_12_out_scale = 0.0780040771f;
static const float test_12_out_zero_point = -0.0402003601f;
static const int8_t test_12_out_scales_frac[] = {18};
static const int test_12_out_sa_dim = -1;

static const int test_12_out_fx8_frac = 3;

#define TEST_12_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {3}, \
    /* .shape = */ {165}, \
    /* .rank =  */ 1


static const mli_tensor test_12_out_tsr_fx16 = {
    TEST_12_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_12_out_tsr_sa8 = {
    TEST_12_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const float test_13_out_data[] = {3.017723f, -1.431333f, -9.591160f, -4.390333f, 3.120803f, 3.115230f};


static const float test_13_out_scale = 0.0768275484f;
static const float test_13_out_zero_point = 0.0957712606f;
static const int8_t test_13_out_scales_frac[] = {18};
static const int test_13_out_sa_dim = -1;

static const int test_13_out_fx8_frac = 3;

#define TEST_13_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {2, 3}, \
    /* .rank =  */ 2


static const mli_tensor test_13_out_tsr_fx16 = {
    TEST_13_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_13_out_tsr_sa8 = {
    TEST_13_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_13_out_tsr_sa32 = {
    TEST_13_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};


static const float test_14_out_data[] = {0.000000f, 0.000000f, 0.000000f, 6.896620f, -8.634307f, 6.647752f, -6.427618f, -1.070723f, -2.514716f, 7.953654f, -2.808299f, -5.049949f, 7.914063f, -3.276412f, 1.557856f, 8.073631f, 2.391850f, 5.285886f, 2.480311f, 6.122534f, 6.947688f, -9.911258f, -2.342940f, 7.570986f, -7.551770f, 0.215943f, -7.573537f, -9.527970f, -7.836982f, 0.020462f, -4.415512f, -9.423211f, -0.038982f, -5.557698f, -5.385271f, 7.586868f, -3.080887f, 7.842045f, -4.367018f, 4.170858f, 7.778330f, 9.435466f, 7.487829f, 5.698713f, 4.086011f, 4.148987f, 7.535503f, -0.873674f, -4.489331f, 2.077738f, -9.924365f, 6.885140f, -1.557505f, -4.921583f, -1.354588f, 7.561852f, -2.319679f, 1.597350f, 4.968725f, -6.417071f, -0.200754f, -5.505342f, -9.268578f, 3.662891f, -7.426233f, -3.116554f, 5.459074f, 7.009363f, 8.551493f, -5.509465f, 3.331704f, 4.822702f, -1.477067f, -3.568621f, -7.739011f, -3.892851f, -1.802804f, -3.501478f, -0.049186f, -8.565456f, 1.936499f, 1.328634f, 3.697861f, 4.164873f, 0.936693f, 5.205464f, -7.962859f, -2.750756f, 1.193661f, 3.110340f, 3.380865f, -1.818767f, -1.922140f, -0.394813f, -4.934332f, -2.620322f, -5.907150f, -7.211148f, -4.177405f, 0.735363f, -1.737686f, -7.412292f, 1.783933f, 8.733760f, -2.113633f, -2.541057f, 3.224445f, -3.743977f, -5.142145f, -4.119677f, 0.809359f, 7.259870f, -3.472272f, -3.585465f, 0.580708f, -5.402188f, 2.448484f, 0.877434f, -6.135832f, -0.458772f, 7.799173f, 4.990580f, -4.252414f, 2.961447f, -9.924398f, 2.864293f, -5.903810f, 6.474615f, -5.081678f, 6.224315f, 4.136892f, 9.660663f, 1.059412f, -8.981616f, -8.595329f, -0.051033f, -9.272034f, 3.846112f, -8.401927f, -5.699935f, 8.441129f, 3.428177f, 1.019881f, -2.606513f, 8.067007f, 2.926122f, -8.253208f, 1.356388f, 8.323949f, -2.451547f, 3.264674f, 5.336285f, 2.708594f, 7.617862f, -3.771752f, 7.999029f, 6.553044f, 8.175687f, 5.744739f, -3.914009f, 4.583303f, -8.109146f, -5.272222f, 0.000000f, 0.000000f};

static const float test_14_out_scale = 0.0779956579f;
static const float test_14_out_zero_point = 0.0162426252f;
static const int8_t test_14_out_scales_frac[] = {18};
static const int test_14_out_sa_dim = -1;

static const int test_14_out_fx8_frac = 3;

#define TEST_14_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {3, 0, 0, 0}, \
    /* .shape = */ {165}, \
    /* .rank =  */ 1


static const mli_tensor test_14_out_tsr_fx16 = {
    TEST_14_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_14_out_tsr_sa8 = {
    TEST_14_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_14_out_tsr_sa32 = {
    TEST_14_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};



tensor_quantizer input_1_fx16(input_1_tsr_fx16, input_1_fx8_frac + 8, input_1_data, sizeof(input_1_data) / sizeof(input_1_data[0]));
tensor_quantizer input_1_sa8(input_1_tsr_sa8, input_1_sa_dim, input_1_data, 
sizeof(input_1_data) / sizeof(input_1_data[0]), input_1_scales, sizeof(input_1_scales) / sizeof(input_1_scales[0]), 
input_1_zero_points, sizeof(input_1_zero_points) / sizeof(input_1_zero_points[0]), 
input_1_scales_frac, sizeof(input_1_scales_frac) / sizeof(input_1_scales_frac[0]));

tensor_quantizer input_2_fx16(input_2_tsr_fx16, input_2_fx8_frac + 8, input_2_data, sizeof(input_2_data) / sizeof(input_2_data[0]));
tensor_quantizer input_2_sa8(input_2_tsr_sa8, input_2_sa_dim, input_2_data, 
sizeof(input_2_data) / sizeof(input_2_data[0]), &input_2_scale, 1, &input_2_zero_point, 1, input_2_scales_frac, 1);

tensor_quantizer input_3_fx16(input_3_tsr_fx16, input_3_fx8_frac + 8, input_3_data, sizeof(input_3_data) / sizeof(input_3_data[0]));
tensor_quantizer input_3_sa8(input_3_tsr_sa8, input_3_sa_dim, input_3_data, 
sizeof(input_3_data) / sizeof(input_3_data[0]), &input_3_scale, 1, &input_3_zero_point, 1, input_3_scales_frac, 1);

tensor_quantizer input_4_fx16(input_4_tsr_fx16, input_4_fx8_frac + 8, input_4_data, sizeof(input_4_data) / sizeof(input_4_data[0]));
tensor_quantizer input_4_sa8(input_4_tsr_sa8, input_4_sa_dim, input_4_data, 
sizeof(input_4_data) / sizeof(input_4_data[0]), &input_4_scale, 1, &input_4_zero_point, 1, input_4_scales_frac, 1);

tensor_quantizer input_5_fx16(input_5_tsr_fx16, input_5_fx8_frac + 8, input_5_data, sizeof(input_5_data) / sizeof(input_5_data[0]));
tensor_quantizer input_5_sa8(input_5_tsr_sa8, input_5_sa_dim, input_5_data, 
sizeof(input_5_data) / sizeof(input_5_data[0]), &input_5_scale, 1, &input_5_zero_point, 1, input_5_scales_frac, 1);

tensor_quantizer input_6_fx16(input_6_tsr_fx16, input_6_fx8_frac + 8, input_6_data, sizeof(input_6_data) / sizeof(input_6_data[0]));
tensor_quantizer input_6_sa8(input_6_tsr_sa8, input_6_sa_dim, input_6_data, 
sizeof(input_6_data) / sizeof(input_6_data[0]), &input_6_scale, 1, &input_6_zero_point, 1, input_6_scales_frac, 1);

tensor_quantizer input_7_sa32(input_7_tsr_sa32, input_7_sa_dim, input_7_data, 
sizeof(input_7_data) / sizeof(input_7_data[0]), &input_7_scale, 1, &input_7_zero_point, 1, input_7_scales_frac, 1);

tensor_quantizer input_8_sa32(input_8_tsr_sa32, input_8_sa_dim, input_8_data, 
sizeof(input_8_data) / sizeof(input_8_data[0]), &input_8_scale, 1, &input_8_zero_point, 1, input_8_scales_frac, 1);


tensor_quantizer test_1_out_fx16(test_1_out_tsr_fx16, test_1_out_fx8_frac + 8, test_1_out_data, sizeof(test_1_out_data) / sizeof(test_1_out_data[0]));
tensor_quantizer test_1_out_sa8(test_1_out_tsr_sa8, test_1_out_sa_dim, test_1_out_data, 
sizeof(test_1_out_data) / sizeof(test_1_out_data[0]), test_1_out_scales, sizeof(test_1_out_scales) / sizeof(test_1_out_scales[0]), 
test_1_out_zero_points, sizeof(test_1_out_zero_points) / sizeof(test_1_out_zero_points[0]), 
test_1_out_scales_frac, sizeof(test_1_out_scales_frac) / sizeof(test_1_out_scales_frac[0]));

tensor_quantizer test_2_out_fx16(test_2_out_tsr_fx16, test_2_out_fx8_frac + 8, test_2_out_data, sizeof(test_2_out_data) / sizeof(test_2_out_data[0]));
tensor_quantizer test_2_out_sa8(test_2_out_tsr_sa8, test_2_out_sa_dim, test_2_out_data, 
sizeof(test_2_out_data) / sizeof(test_2_out_data[0]), &test_2_out_scale, 1, &test_2_out_zero_point, 1, test_2_out_scales_frac, 1);

tensor_quantizer test_3_out_fx16(test_3_out_tsr_fx16, test_3_out_fx8_frac + 8, test_3_out_data, sizeof(test_3_out_data) / sizeof(test_3_out_data[0]));
tensor_quantizer test_3_out_sa8(test_3_out_tsr_sa8, test_3_out_sa_dim, test_3_out_data, 
sizeof(test_3_out_data) / sizeof(test_3_out_data[0]), &test_3_out_scale, 1, &test_3_out_zero_point, 1, test_3_out_scales_frac, 1);

tensor_quantizer test_4_out_fx16(test_4_out_tsr_fx16, test_4_out_fx8_frac + 8, test_4_out_data, sizeof(test_4_out_data) / sizeof(test_4_out_data[0]));
tensor_quantizer test_4_out_sa8(test_4_out_tsr_sa8, test_4_out_sa_dim, test_4_out_data, 
sizeof(test_4_out_data) / sizeof(test_4_out_data[0]), &test_4_out_scale, 1, &test_4_out_zero_point, 1, test_4_out_scales_frac, 1);

tensor_quantizer test_5_out_fx16(test_5_out_tsr_fx16, test_5_out_fx8_frac + 8, test_5_out_data, sizeof(test_5_out_data) / sizeof(test_5_out_data[0]));
tensor_quantizer test_5_out_sa8(test_5_out_tsr_sa8, test_5_out_sa_dim, test_5_out_data, 
sizeof(test_5_out_data) / sizeof(test_5_out_data[0]), &test_5_out_scale, 1, &test_5_out_zero_point, 1, test_5_out_scales_frac, 1);

tensor_quantizer test_6_out_fx16(test_6_out_tsr_fx16, test_6_out_fx8_frac + 8, test_6_out_data, sizeof(test_6_out_data) / sizeof(test_6_out_data[0]));
tensor_quantizer test_6_out_sa8(test_6_out_tsr_sa8, test_6_out_sa_dim, test_6_out_data, 
sizeof(test_6_out_data) / sizeof(test_6_out_data[0]), &test_6_out_scale, 1, &test_6_out_zero_point, 1, test_6_out_scales_frac, 1);

tensor_quantizer test_7_out_fx16(test_7_out_tsr_fx16, test_7_out_fx8_frac + 8, test_7_out_data, sizeof(test_7_out_data) / sizeof(test_7_out_data[0]));
tensor_quantizer test_7_out_sa8(test_7_out_tsr_sa8, test_7_out_sa_dim, test_7_out_data, 
sizeof(test_7_out_data) / sizeof(test_7_out_data[0]), &test_7_out_scale, 1, &test_7_out_zero_point, 1, test_7_out_scales_frac, 1);

tensor_quantizer test_8_out_fx16(test_8_out_tsr_fx16, test_8_out_fx8_frac + 8, test_8_out_data, sizeof(test_8_out_data) / sizeof(test_8_out_data[0]));
tensor_quantizer test_8_out_sa8(test_8_out_tsr_sa8, test_8_out_sa_dim, test_8_out_data, 
sizeof(test_8_out_data) / sizeof(test_8_out_data[0]), &test_8_out_scale, 1, &test_8_out_zero_point, 1, test_8_out_scales_frac, 1);

tensor_quantizer test_9_out_fx16(test_9_out_tsr_fx16, test_9_out_fx8_frac + 8, test_9_out_data, sizeof(test_9_out_data) / sizeof(test_9_out_data[0]));
tensor_quantizer test_9_out_sa8(test_9_out_tsr_sa8, test_9_out_sa_dim, test_9_out_data, 
sizeof(test_9_out_data) / sizeof(test_9_out_data[0]), &test_9_out_scale, 1, &test_9_out_zero_point, 1, test_9_out_scales_frac, 1);

tensor_quantizer test_10_out_fx16(test_10_out_tsr_fx16, test_10_out_fx8_frac + 8, test_10_out_data, sizeof(test_10_out_data) / sizeof(test_10_out_data[0]));
tensor_quantizer test_10_out_sa8(test_10_out_tsr_sa8, test_10_out_sa_dim, test_10_out_data, 
sizeof(test_10_out_data) / sizeof(test_10_out_data[0]), &test_10_out_scale, 1, &test_10_out_zero_point, 1, test_10_out_scales_frac, 1);

tensor_quantizer test_11_out_fx16(test_11_out_tsr_fx16, test_11_out_fx8_frac + 8, test_11_out_data, sizeof(test_11_out_data) / sizeof(test_11_out_data[0]));
tensor_quantizer test_11_out_sa8(test_11_out_tsr_sa8, test_11_out_sa_dim, test_11_out_data, 
sizeof(test_11_out_data) / sizeof(test_11_out_data[0]), &test_11_out_scale, 1, &test_11_out_zero_point, 1, test_11_out_scales_frac, 1);

tensor_quantizer test_12_out_fx16(test_12_out_tsr_fx16, test_12_out_fx8_frac + 8, test_12_out_data, sizeof(test_12_out_data) / sizeof(test_12_out_data[0]));
tensor_quantizer test_12_out_sa8(test_12_out_tsr_sa8, test_12_out_sa_dim, test_12_out_data, 
sizeof(test_12_out_data) / sizeof(test_12_out_data[0]), &test_12_out_scale, 1, &test_12_out_zero_point, 1, test_12_out_scales_frac, 1);

tensor_quantizer test_13_out_sa32(test_13_out_tsr_sa32, test_13_out_sa_dim, test_13_out_data, 
sizeof(test_13_out_data) / sizeof(test_13_out_data[0]), &test_13_out_scale, 1, &test_13_out_zero_point, 1, test_13_out_scales_frac, 1);

tensor_quantizer test_14_out_sa32(test_14_out_tsr_sa32, test_14_out_sa_dim, test_14_out_data, 
sizeof(test_14_out_data) / sizeof(test_14_out_data[0]), &test_14_out_scale, 1, &test_14_out_zero_point, 1, test_14_out_scales_frac, 1);